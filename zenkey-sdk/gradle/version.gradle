apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
    tag {
        prefix = project.name
    }
    versionCreator 'simple'
}

ext {
    SEMANTIC_VERSION = new SemanticVersion(scmVersion.version)
}

project.version = SEMANTIC_VERSION.name

android.libraryVariants.all { variant ->

    if (variant.name == "qa") {
        project.version = scmVersion.version + "-QA"
    } else {
        project.version = scmVersion.version
    }

    variant.outputs.all { output ->
        if (outputFile != null && outputFileName.endsWith('.aar')) {
            outputFileName = "${project.name}-${project.version}-${variant}.aar"
        }
    }
}

class SemanticVersion {

    String name
    int code

    int major
    int minor
    int patch
    String preRelease
    String buildMetadata

    SemanticVersion(String version) {
        name = version
        try {
            def finder = (version =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?/)
            finder.matches()
            major = finder.group(1) as Integer
            minor = finder.group(2) as Integer
            patch = finder.group(3) as Integer
            code = ((major as Integer) * 10000) + ((minor as Integer) * 100) + (patch as Integer)
            preRelease = finder.group(4) as String
            buildMetadata = finder.group(5) as String
        } catch (Exception e) {
            e.printStackTrace()
            code = 1
        }
    }
    
    @Override
    String toString() {
        return "SemanticVersion{" +
                "name='" + name + '\'' +
                ", code=" + code +
                ", major=" + major +
                ", minor=" + minor +
                ", patch=" + patch +
                ", preRelease='" + preRelease + '\'' +
                ", buildMetadata='" + buildMetadata + '\'' +
                '}';
    }
}
