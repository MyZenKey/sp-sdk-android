import java.text.SimpleDateFormat

apply plugin: "com.betomorrow.appcenter"

appcenter {
    apiToken = System.getenv("APP_CENTER_API_TOKEN") ?: ""
    ownerName = System.getenv("OWNER_NAME") ?: ""
    def distributionGroup = System.getenv("DISTRIBUTION_GROUP") ?: ""
    apps {
        qa {
            appName = 'ZenKey-SDK-Sample-Qa'
            releaseNotes { getTheLastTwoGitMerges() }
            distributionGroups = [ distributionGroup ]
        }
        prod {
            appName = 'ZenKey-SDK-Sample-Release'
            releaseNotes { getTheLastTwoGitTags() }
            distributionGroups = [ distributionGroup ]
        }
    }
}

/**
 * @return The git hashes of the last two merge commits.
 */
static String getTheLastTwoGitMerges() {
    return executeCommand("git rev-list --min-parents=2 --max-count=2 HEAD")
}

/**
 * @return The last two git tags
 */
static String getTheLastTwoGitTags() {
    return executeCommand("git tag | sort -r | head -2")
}

static String executeCommand(String command) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        return ["cmd", "/c", command].execute().text.trim()
    } else {
        return ["sh", "-c", command].execute().text.trim()
    }
}

static String releaseNotes(Closure<String> commandToExecute) {
    def inputs = generateInputs(commandToExecute)
    def command = createGitLogCommand(inputs)
    return "${createHeader()}\n${executeCommand(command)}"
}

static String generateInputs(Closure<String> commandToExecute) {
    def lines = commandToExecute().readLines()

    if (lines.isEmpty()) return lines

    def last = lines.last()
    def first = lines.first()

    def builder = new StringBuilder().append(last).append("..")

    if (last != first) {
        builder.append(first)
    }

    return builder.toString()
}

/**
 * @param inputs
 * @return A formatted list of commits based on the inputs
 */
static String createGitLogCommand(String inputs) {
    return "git log --pretty=format:'* [%ad] %s (%an)' --date=short ${inputs}"
}

/**
 * Provides a header formatted specifically for Markdown included as part of the release notes
 * to be uploaded to HockeyApp along with the APK.</br>
 * An example of the expected header:</br>
 * <code>
 *     **Built on:** Fri 16-Feb-2018 02:50 PM
 *     **Branch:** develop
 *     **Commit:** a6dbf032
 * </code>
 *
 * @return Generated header for the release notes on HockeyApp
 */
static String createHeader() {
    def formatter = new SimpleDateFormat("E dd-MMM-yyyy hh:mm a")
    def dateTime = formatter.format(new Date())

    return new StringBuilder().append("**Built on:** ${dateTime}")
            .append("\n")
            .append("**Branch:** ${getBranch()}")
            .append("\n")
            .append("**Commit:** ${getCommit()}")
            .toString()
}

/**
 * @return The current git branch
 */
static String getBranch() {
    return 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

/**
 * @return The current git branch's hash
 */
static String getCommit() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}
